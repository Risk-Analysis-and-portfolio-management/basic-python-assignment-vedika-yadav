#import required files
import yfinance as yf
import pandas as pd
import numpy as np
import os
import matplotlib
from datetime import datetime, timedelta
from matplotlib import pyplot as plt
from matplotlib import dates as md

def daily_return(openp, closep):
        daily_return = (closep-openp)/openp
        return daily_return 
def money_invested(df1, df2, df3, df4, df5, weights) :
    investment = weights[0]*df1['Open'].values[0] + weights[1]*df2['Open'].values[0] + weights[2]*df3['Open'].values[0] + weights[3]*df4['Open'].values[0] + weights[4]*df5['Open'].values[0]
    return investment

def return_generated(df1, df2, df3, df4,df5, weights) :
    total_return = weights[0]*df1['Adj Close'].values[-1] + weights[1]*df2['Adj Close'].values[-1] + weights[2]*df3['Adj Close'].values[-1] + weights[3]*df4['Adj Close'].values[-1] + weights[4]*df5['Adj Close'].values[-1]
    return total_return
    
w1 = [0.2,0.2,0.2,0.2,0.2]
w2 = [0.6,0.1,0.1,0.1,0.1]

tickers = ['AAPL', 'GOOGL', 'TSLA', 'NVDA', 'MSFT']

end_date = datetime.today()
start_date = end_date - timedelta(days = 365)

df1 = yf.download(tickers[0], start = start_date, end = end_date)
df2 = yf.download(tickers[1], start = start_date, end = end_date)
df3 = yf.download(tickers[2], start = start_date, end = end_date)
df4 = yf.download(tickers[3], start = start_date, end = end_date)
df5 = yf.download(tickers[4], start = start_date, end = end_date)

df1['Daily Return'] = daily_return(df1['Open'], df1['Adj Close'])
df2['Daily Return'] = daily_return(df2['Open'], df2['Adj Close'])
df3['Daily Return'] = daily_return(df3['Open'], df3['Adj Close'])
df4['Daily Return'] = daily_return(df4['Open'], df4['Adj Close'])
df5['Daily Return'] = daily_return(df5['Open'], df5['Adj Close'])

p_returns1 = df1['Daily Return']*w1[0]+df2['Daily Return']*w1[1]+df3['Daily Return']*w1[2]+df4['Daily Return']*w1[3]+df5['Daily Return']*w1[4]
p_returns2 = df1['Daily Return']*w2[0]+df2['Daily Return']*w2[1]+df3['Daily Return']*w2[2]+df4['Daily Return']*w2[3]+df5['Daily Return']*w2[4]

print('')
print('Portfolio 1 : AAPL = 0.2, GOOGL = 0.2, TSLA = 0.2, NVDA = 0.2, MSFT = 0.2')
print('Portfolio 2 : AAPL = 0.6, GOOGL = 0.1, TSLA = 0.1, NVDA = 0.1, MSFT = 0.1')
print('')

plt.plot(p_returns1, color = 'g', label = 'Portfolio 1')
plt.plot(p_returns2, color = 'r', alpha = 0.7, label = 'Portfolio 2')
months = md.MonthLocator(interval = 1, bymonthday = 1)
plt.gca().xaxis.set_major_locator(months)
plt.gca().xaxis.set_major_formatter(md.DateFormatter('%Y-%m-%d'))
plt.xticks(rotation = 45, ha='right')
plt.title("Daily Return of Both Portfolios", fontsize = 18)
plt.xlabel('Date (YYYY-MM-DD)', fontsize = 14)
plt.ylabel('Returns', fontsize = 14)
plt.legend(loc = "upper right")
matplotlib.rc('xtick', labelsize = 11)
matplotlib.rc('ytick', labelsize = 11)
plt.show()



percent_return_1 = ((return_generated(df1, df2, df3, df4, df5, w1) - money_invested(df1, df2, df3, df4, df5, w1))/money_invested(df1, df2, df3, df4, df5, w1))*100
percent_return_2 = ((return_generated(df1, df2, df3, df4, df5, w2) - money_invested(df1, df2, df3, df4, df5, w2))/money_invested(df1, df2, df3, df4, df5, w2))*100

print(f"Percent return of portfolio 1 : {percent_return_1[0]}%")
print(f"Percent return of portfolio 2 : {percent_return_2[0]}%")
if percent_return_1>percent_return_2 :
    print("Portfolio 1 performed better because it gave a greater percentage return than Portfolio 2.")
elif percent_return_1<percent_return_2 :
    print("Portfolio 2 performed better because it gave a greater percentage return than Portfolio 1.")
else :
    print("Both portfolios performed equally well because they gave the same percentage return.")